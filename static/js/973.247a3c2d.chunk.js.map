{"version":3,"file":"static/js/973.247a3c2d.chunk.js","mappings":"+UAEaA,EAAcC,EAAAA,GAAAA,IAAH,yHAOXC,EAAcD,EAAAA,GAAAA,IAAH,qEAKXE,EAAaF,EAAAA,GAAAA,GAAH,gUACN,qBAAGG,MAAkBC,MAAM,EAA3B,IACG,qBAAGD,MAAkBC,MAAM,EAA3B,IACF,qBAAGD,MAAkBC,MAAM,EAA3B,IACC,qBAAGD,MAAkBC,MAAM,EAA3B,IAOR,qBAAGD,MAAkBE,cAArB,IACM,qBAAGF,MAAkBG,UAArB,IAGF,SAAAC,GAAK,OAAIA,EAAMJ,MAAMK,UAAUC,CAA1B,IAIPC,EAAeV,EAAAA,GAAAA,IAAH,sQAiBZW,EAAcX,EAAAA,GAAAA,IAAH,gF,uCCtCXY,EAAmB,SAAC,GAG1B,IAAD,IAFJC,MAASC,EAEL,EAFKA,YAAaC,EAElB,EAFkBA,MAAOC,EAEzB,EAFyBA,eAAgBC,EAEzC,EAFyCA,aAAcC,EAEvD,EAFuDA,UAC3DC,EACI,EADJA,IAEA,OACE,+BACE,UAACpB,EAAD,YACE,SAACE,EAAD,WACE,gBACEmB,IACEN,EAAW,6CAC+BA,GACtCO,EAENC,IAAKN,EACLO,MAAO,SAGX,SAACrB,EAAD,UAAaa,IACK,IAAjBE,IACC,iCACE,SAACP,EAAD,WACE,SAACc,EAAA,EAAD,CAAmBC,OAAM,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAcS,QAAQ,QAEnD,SAACC,EAAA,EAAD,CACEC,KAAK,YACLC,aAAeZ,EAAe,GAAM,EACpCa,UAAW,GACXC,KAAK,QACLC,UAAQ,QAId,SAACrB,EAAD,WACE,SAACsB,EAAA,EAAD,CAAQC,KAAI,OAAEhB,QAAF,IAAEA,OAAF,EAAEA,EAAWiB,MAAM,EAAG,GAAIhB,IAAKA,UAKpD,ECjDYiB,EAAkBpC,EAAAA,GAAAA,GAAH,qJASfqC,EAAgBrC,EAAAA,GAAAA,GAAH,q6BAKb,qBAAGG,MAAkBC,MAAM,EAA3B,ICoDb,EAzDqB,SAAC,GAAa,IAAXe,EAAU,EAAVA,IACtB,GAA4BmB,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAMC,EAAAA,EAAAA,MAAND,EAEAE,GAAaC,EAAAA,EAAAA,MAAbD,SAGFE,GAAWC,EAAAA,EAAAA,MAoBjB,OAlBAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGT,GAAa,GACbE,GAAS,GAHZ,UAK4BQ,EAAAA,EAAAA,GAAkBL,EAAU5B,GALxD,OAKSkC,EALT,OAQGb,EAAUa,GARb,gDAUGT,EAAS,EAAD,IAVX,yBAYGF,GAAa,GAZhB,2EAAD,EAeD,GAAE,CAACK,EAAU5B,IAEToB,EAIDI,GACK,uBAAIA,EAAMW,WAIjB,gCACGb,IAAa,SAACc,EAAA,EAAD,IACbZ,IAAS,SAACa,EAAA,EAAD,CAAgBF,QAAST,EAAE,yBAEnCF,IACA,SAACP,EAAD,UACGG,EAAOkB,KAAI,SAAA5C,GAAK,OACf,SAACwB,EAAD,WACE,SAAC,KAAD,CAAMqB,GAAE,kBAAa7C,EAAM8C,IAAMC,MAAO,CAAEC,KAAMZ,GAAhD,UACE,SAACrC,EAAD,CAAiCC,MAAOA,EAAOM,IAAKA,GAA7BN,EAAM8C,OAFb9C,EAAM8C,GADX,UAdhB,yBAAMd,EAAE,YAyBlB,C","sources":["components/ActorsMoviesItem/ActorsMoviesItem.styled.jsx","components/ActorsMoviesItem/ActorsMoviesItem.jsx","components/ActorsMovies/ActorsMovies.styled.jsx","components/ActorsMovies/ActorsMovies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const MoviePoster = styled.div`\n  margin-bottom: 10px;\n  overflow: hidden;\n`;\n\nexport const MovieTitle = styled.h4`\n  padding-top: ${({ theme }) => theme.space[3]}px;\n  padding-bottom: ${({ theme }) => theme.space[3]}px;\n  padding-left: ${({ theme }) => theme.space[2]}px;\n  padding-right: ${({ theme }) => theme.space[2]}px;\n  max-width: 100%;\n\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  color: ${({ theme }) => theme.cardsTextColor};\n  text-shadow: ${({ theme }) => theme.textShadow};\n  text-align: center;\n\n  font-size: ${props => props.theme.fontSizes.m};\n  font-weight: 700;\n`;\n\nexport const CircleRating = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 42px;\n  height: 42px;\n\n  text-shadow: 0 0.3px 0.3px #000;\n  border-radius: 50%;\n  padding: 4px;\n`;\n\nexport const GenresBlock = styled.div`\n  position: absolute;\n  bottom: 78px;\n  right: 10px;\n`;\n","import { Genres } from 'components/Genres/Genres';\nimport {\n  CardWrapper,\n  MoviePoster,\n  MovieTitle,\n  GenresBlock,\n  CircleRating,\n} from './ActorsMoviesItem.styled';\nimport NoPoster from 'assets/no-poster.jpg';\nimport { Rating } from '@mui/material';\nimport { RatingProgressbar } from 'components/RatingProgressbar/RatingProgressbar';\n\nexport const ActorsMoviesItem = ({\n  movie: { poster_path, title, original_title, vote_average, genre_ids },\n  lng,\n}) => {\n  return (\n    <>\n      <CardWrapper>\n        <MoviePoster>\n          <img\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/original${poster_path}`\n                : NoPoster\n            }\n            alt={original_title}\n            width={300}\n          />\n        </MoviePoster>\n        <MovieTitle>{title}</MovieTitle>\n        {vote_average !== 0 && (\n          <>\n            <CircleRating>\n              <RatingProgressbar rating={vote_average?.toFixed(1)} />\n            </CircleRating>\n            <Rating\n              name=\"read-only\"\n              defaultValue={(vote_average / 10) * 5}\n              precision={0.5}\n              size=\"large\"\n              readOnly\n            />\n          </>\n        )}\n        <GenresBlock>\n          <Genres data={genre_ids?.slice(0, 2)} lng={lng} />\n        </GenresBlock>\n      </CardWrapper>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ActorMoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  margin-top: 20px;\n  margin-bottom: 50px;\n`;\n\nexport const MovieListItem = styled.li`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: ${({ theme }) => theme.space[3]}px;\n\n  max-width: 100%;\n  width: 260px;\n  height: 100%;\n\n  border: none;\n  transform: scale(1);\n  border-radius: 8px;\n\n  background-color: transparent;\n\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n  backdrop-filter: blur(3.5px);\n  transition: box-shadow 250ms linear;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 0px 2px 24px -5px rgba(0, 0, 0, 0.74);\n  }\n\n  img {\n    display: block;\n    min-height: 100%;\n    height: 420px;\n    width: 100%;\n\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n    transition: transform 250ms linear;\n    transform: scale(1);\n\n    object-fit: cover;\n    object-position: center;\n\n    &:hover {\n      transform: scale(1.1);\n    }\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport { getMoviesbyActors } from 'services/themoviedbAPI';\nimport { useTranslation } from 'react-i18next';\n\nimport { Loader } from 'components/Loader/Loader';\nimport ImageErrorView from 'components/ImageErrorView/ImageErrorView';\nimport { ActorsMoviesItem } from 'components/ActorsMoviesItem/ActorsMoviesItem';\nimport { ActorMoviesList, MovieListItem } from './ActorsMovies.styled';\n\n//  /actors/:id/\nconst ActorsMovies = ({ lng }) => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { t } = useTranslation();\n  // звертаємось до динамічної частини адреси і отрмуємо ключ для подальшого отримання динамічний даних\n  const { personId } = useParams();\n  //console.log(personId);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        setError(false);\n\n        const dataMovies = await getMoviesbyActors(personId, lng);\n        //console.log(dataMovies);\n\n        setMovies(dataMovies);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [personId, lng]);\n\n  if (!movies) {\n    return <div>{t('loading')}</div>;\n  }\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <ImageErrorView message={t('moviesPage.mistake')} />}\n\n      {!error && (\n        <ActorMoviesList>\n          {movies.map(movie => (\n            <MovieListItem key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                <ActorsMoviesItem key={movie.id} movie={movie} lng={lng} />\n              </Link>\n            </MovieListItem>\n          ))}\n        </ActorMoviesList>\n      )}\n    </>\n  );\n};\n\nexport default ActorsMovies;\n\n/* \n import {useNavigate} from 'react-router-dom';\nconst navigate = useNavigate();\n  const goBack = () => navigate(-1); // back on 1 page // (1) => move forward  - повертає на 1 сторінку назад, звідки прийшов або далі, примусовий перехід, можна вказати url cвій \n  <button onClick={goBack}></button>;\n  */\n"],"names":["CardWrapper","styled","MoviePoster","MovieTitle","theme","space","cardsTextColor","textShadow","props","fontSizes","m","CircleRating","GenresBlock","ActorsMoviesItem","movie","poster_path","title","original_title","vote_average","genre_ids","lng","src","NoPoster","alt","width","RatingProgressbar","rating","toFixed","Rating","name","defaultValue","precision","size","readOnly","Genres","data","slice","ActorMoviesList","MovieListItem","useState","movies","setMovies","isLoading","setIsLoading","error","setError","t","useTranslation","personId","useParams","location","useLocation","useEffect","getMoviesbyActors","dataMovies","message","Loader","ImageErrorView","map","to","id","state","from"],"sourceRoot":""}